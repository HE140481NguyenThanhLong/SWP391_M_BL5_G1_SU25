package spring.backend.m_bl5_g1_su25.OnlineShopping.common.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

// Real email service - enabled for production use
@Service
@RequiredArgsConstructor
@Slf4j
public class EmailService {

    private final JavaMailSender mailSender;

    @Value("${spring.mail.username:smartshopforeveryone@gmail.com}")
    private String fromEmail;

    @Value("${app.base-url:http://localhost:8080}")
    private String baseUrl;

    public void sendPasswordResetEmail(String toEmail, String resetToken) {
        try {
            SimpleMailMessage message = new SimpleMailMessage();
            message.setFrom(fromEmail);
            message.setTo(toEmail);
            message.setSubject("Smart Shop - Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u");
            message.setText(buildPasswordResetEmailContent(resetToken));

            mailSender.send(message);
            log.info("Password reset email sent successfully to: {}", toEmail);

        } catch (Exception e) {
            log.error("Failed to send password reset email to: {}. Error: {}", toEmail, e.getMessage(), e);
            throw new RuntimeException("Kh√¥ng th·ªÉ g·ª≠i email ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u. Vui l√≤ng th·ª≠ l·∫°i sau.");
        }
    }

    public void sendPasswordChangeNotification(String toEmail) {
        try {
            SimpleMailMessage message = new SimpleMailMessage();
            message.setFrom(fromEmail);
            message.setTo(toEmail);
            message.setSubject("Smart Shop - M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng");
            message.setText(buildPasswordChangeNotificationContent());

            mailSender.send(message);
            log.info("Password change notification sent successfully to: {}", toEmail);

        } catch (Exception e) {
            log.error("Failed to send password change notification to: {}. Error: {}", toEmail, e.getMessage(), e);
            // Don't throw exception here as password was already changed successfully
        }
    }

    /**
     * G·ª≠i email ch√†o m·ª´ng khi ng∆∞·ªùi d√πng ƒëƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng
     */
    public void sendWelcomeEmail(String toEmail, String username) {
        try {
            SimpleMailMessage message = new SimpleMailMessage();
            message.setFrom(fromEmail);
            message.setTo(toEmail);
            message.setSubject("Smart Shop - Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Smart Shop!");
            message.setText(buildWelcomeEmailContent(username));

            mailSender.send(message);
            log.info("Welcome email sent successfully to: {}", toEmail);

        } catch (Exception e) {
            log.error("Failed to send welcome email to: {}. Error: {}", toEmail, e.getMessage(), e);
            // Don't throw exception - registration was already successful
        }
    }

    /**
     * G·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng
     */
    public void sendOrderConfirmationEmail(String toEmail, String customerName, String orderId, String totalAmount) {
        try {
            SimpleMailMessage message = new SimpleMailMessage();
            message.setFrom(fromEmail);
            message.setTo(toEmail);
            message.setSubject("Smart Shop - X√°c nh·∫≠n ƒë∆°n h√†ng #" + orderId);
            message.setText(buildOrderConfirmationEmailContent(customerName, orderId, totalAmount));

            mailSender.send(message);
            log.info("Order confirmation email sent successfully to: {} for order: {}", toEmail, orderId);

        } catch (Exception e) {
            log.error("Failed to send order confirmation email to: {}. Error: {}", toEmail, e.getMessage(), e);
        }
    }

    /**
     * G·ª≠i email th√¥ng b√°o tr·∫°ng th√°i ƒë∆°n h√†ng
     */
    public void sendOrderStatusUpdateEmail(String toEmail, String customerName, String orderId, String newStatus) {
        try {
            SimpleMailMessage message = new SimpleMailMessage();
            message.setFrom(fromEmail);
            message.setTo(toEmail);
            message.setSubject("Smart Shop - C·∫≠p nh·∫≠t ƒë∆°n h√†ng #" + orderId);
            message.setText(buildOrderStatusUpdateEmailContent(customerName, orderId, newStatus));

            mailSender.send(message);
            log.info("Order status update email sent successfully to: {} for order: {}", toEmail, orderId);

        } catch (Exception e) {
            log.error("Failed to send order status update email to: {}. Error: {}", toEmail, e.getMessage(), e);
        }
    }

    /**
     * G·ª≠i email khuy·∫øn m√£i
     */
    public void sendPromotionEmail(String toEmail, String customerName, String promotionTitle, String promotionDetails, String discountCode) {
        try {
            SimpleMailMessage message = new SimpleMailMessage();
            message.setFrom(fromEmail);
            message.setTo(toEmail);
            message.setSubject("Smart Shop - " + promotionTitle);
            message.setText(buildPromotionEmailContent(customerName, promotionTitle, promotionDetails, discountCode));

            mailSender.send(message);
            log.info("Promotion email sent successfully to: {}", toEmail);

        } catch (Exception e) {
            log.error("Failed to send promotion email to: {}. Error: {}", toEmail, e.getMessage(), e);
        }
    }

    /**
     * G·ª≠i email th√¥ng b√°o s·∫£n ph·∫©m c√≥ h√†ng tr·ªü l·∫°i
     */
    public void sendProductRestockNotification(String toEmail, String customerName, String productName, String productUrl) {
        try {
            SimpleMailMessage message = new SimpleMailMessage();
            message.setFrom(fromEmail);
            message.setTo(toEmail);
            message.setSubject("Smart Shop - S·∫£n ph·∫©m " + productName + " ƒë√£ c√≥ h√†ng tr·ªü l·∫°i!");
            message.setText(buildProductRestockEmailContent(customerName, productName, productUrl));

            mailSender.send(message);
            log.info("Product restock notification sent successfully to: {} for product: {}", toEmail, productName);

        } catch (Exception e) {
            log.error("Failed to send product restock notification to: {}. Error: {}", toEmail, e.getMessage(), e);
        }
    }

    private String buildPasswordResetEmailContent(String resetToken) {
        String resetLink = baseUrl + "/shared/change-password?token=" + resetToken;

        return String.format("""
            K√≠nh ch√†o Qu√Ω kh√°ch h√†ng,
            
            Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n Smart Shop c·ªßa b·∫°n.
            
            Vui l√≤ng nh·∫•p v√†o li√™n k·∫øt b√™n d∆∞·ªõi ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:
            %s
            
            Li√™n k·∫øt n√†y s·∫Ω h·∫øt h·∫°n sau 24 gi·ªù. N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, 
            vui l√≤ng b·ªè qua email n√†y ho·∫∑c li√™n h·ªá v·ªõi ƒë·ªôi ng≈© h·ªó tr·ª£ c·ªßa ch√∫ng t√¥i.
            
            Tr√¢n tr·ªçng,
            ƒê·ªôi ng≈© Smart Shop
            Email h·ªó tr·ª£: smartshopforeveryone@gmail.com
            """, resetLink);
    }

    private String buildPasswordChangeNotificationContent() {
        return """
            K√≠nh ch√†o Qu√Ω kh√°ch h√†ng,
            
            M·∫≠t kh·∫©u t√†i kho·∫£n Smart Shop c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi th√†nh c√¥ng.
            
            N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán thay ƒë·ªïi n√†y, vui l√≤ng li√™n h·ªá ngay v·ªõi ƒë·ªôi ng≈© h·ªó tr·ª£ 
            c·ªßa ch√∫ng t√¥i t·∫°i ƒë·ªãa ch·ªâ smartshopforeveryone@gmail.com.
            
            Tr√¢n tr·ªçng,
            ƒê·ªôi ng≈© Smart Shop
            Email h·ªó tr·ª£: smartshopforeveryone@gmail.com
            """;
    }

    private String buildWelcomeEmailContent(String username) {
        return String.format("""
            K√≠nh ch√†o %s,
            
            Ch√†o m·ª´ng b·∫°n ƒë√£ gia nh·∫≠p c·ªông ƒë·ªìng Smart Shop!
            
            T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng. B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu mua s·∫Øm ngay b√¢y gi·ªù v·ªõi:
            
            üõçÔ∏è H√†ng ng√†n s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao
            üöö Giao h√†ng nhanh ch√≥ng tr√™n to√†n qu·ªëc  
            üíù ∆Øu ƒë√£i ƒë·ªôc quy·ªÅn cho th√†nh vi√™n
            üîí Thanh to√°n an to√†n, b·∫£o m·∫≠t
            
            Kh√°m ph√° ngay: %s
            
            C·∫£m ∆°n b·∫°n ƒë√£ l·ª±a ch·ªçn Smart Shop!
            
            Tr√¢n tr·ªçng,
            ƒê·ªôi ng≈© Smart Shop
            Email h·ªó tr·ª£: smartshopforeveryone@gmail.com
            """, username, baseUrl);
    }

    private String buildOrderConfirmationEmailContent(String customerName, String orderId, String totalAmount) {
        return String.format("""
            K√≠nh ch√†o %s,
            
            C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng t·∫°i Smart Shop!
            
            TH√îNG TIN ƒê√îN H√ÄNG:
            - M√£ ƒë∆°n h√†ng: #%s
            - T·ªïng ti·ªÅn: %s VND
            - Th·ªùi gian ƒë·∫∑t h√†ng: %s
            
            ƒê∆°n h√†ng c·ªßa b·∫°n ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω. Ch√∫ng t√¥i s·∫Ω g·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t khi ƒë∆°n h√†ng ƒë∆∞·ª£c giao.
            
            Theo d√µi ƒë∆°n h√†ng t·∫°i: %s/customer/orders
            
            C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng Smart Shop!
            
            Tr√¢n tr·ªçng,
            ƒê·ªôi ng≈© Smart Shop
            Email h·ªó tr·ª£: smartshopforeveryone@gmail.com
            """, customerName, orderId, totalAmount, java.time.LocalDateTime.now().format(java.time.format.DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm")), baseUrl);
    }

    private String buildOrderStatusUpdateEmailContent(String customerName, String orderId, String newStatus) {
        String statusMessage = switch (newStatus.toLowerCase()) {
            case "processing" -> "ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω";
            case "shipped" -> "ƒë√£ ƒë∆∞·ª£c giao cho ƒë∆°n v·ªã v·∫≠n chuy·ªÉn";
            case "delivered" -> "ƒë√£ ƒë∆∞·ª£c giao th√†nh c√¥ng";
            case "cancelled" -> "ƒë√£ ƒë∆∞·ª£c h·ªßy";
            default -> newStatus;
        };

        return String.format("""
            K√≠nh ch√†o %s,
            
            ƒê∆°n h√†ng #%s c·ªßa b·∫°n %s.
            
            B·∫°n c√≥ th·ªÉ theo d√µi chi ti·∫øt ƒë∆°n h√†ng t·∫°i: %s/customer/orders
            
            N·∫øu c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o, vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i.
            
            Tr√¢n tr·ªçng,
            ƒê·ªôi ng≈© Smart Shop
            Email h·ªó tr·ª£: smartshopforeveryone@gmail.com
            """, customerName, orderId, statusMessage, baseUrl);
    }

    private String buildPromotionEmailContent(String customerName, String promotionTitle, String promotionDetails, String discountCode) {
        return String.format("""
            K√≠nh ch√†o %s,
            
            üéâ %s üéâ
            
            %s
            
            M√É GI·∫¢M GI√Å: %s
            
            ‚è∞ ∆Øu ƒë√£i c√≥ h·∫°n - ƒê·ª´ng b·ªè l·ª° c∆° h·ªôi!
            
            Mua s·∫Øm ngay t·∫°i: %s
            
            Tr√¢n tr·ªçng,
            ƒê·ªôi ng≈© Smart Shop
            Email h·ªó tr·ª£: smartshopforeveryone@gmail.com
            """, customerName, promotionTitle, promotionDetails, discountCode, baseUrl);
    }

    private String buildProductRestockEmailContent(String customerName, String productName, String productUrl) {
        return String.format("""
            K√≠nh ch√†o %s,
            
            üéâ Tin t·ªët! S·∫£n ph·∫©m "%s" m√† b·∫°n quan t√¢m ƒë√£ c√≥ h√†ng tr·ªü l·∫°i!
            
            ƒê·ª´ng ƒë·ªÉ b·ªè l·ª° c∆° h·ªôi n√†y. S·ªë l∆∞·ª£ng c√≥ h·∫°n!
            
            Xem s·∫£n ph·∫©m ngay: %s
            
            C·∫£m ∆°n b·∫°n ƒë√£ theo d√µi Smart Shop!
            
            Tr√¢n tr·ªçng,
            ƒê·ªôi ng≈© Smart Shop
            Email h·ªó tr·ª£: smartshopforeveryone@gmail.com
            """, customerName, productName, productUrl);
    }
}
